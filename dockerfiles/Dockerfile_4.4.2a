FROM ubuntu:20.04

############################################ set environment variables #################################################

## user that will be using the container
ARG knimeuser=knimeuser
ARG knimeuser_home=/home/${knimeuser}

# change the version of the docker file here to correspond to the docker file name
ARG dockerfile_version=4.4.2a

## default folders (knime_folder ENV is used in shortcut to knime, others can be ARG)
ENV knime_folder=${knimeuser_home}/knime
ARG knime_workspace_folder=${knimeuser_home}/knime-workspace

ARG files_to_copy_folder=./files_to_copy/${dockerfile_version}
ARG copied_files_folder=/usr/copied_files

########################################### creates KNIME user and switches to it ######################################

RUN apt-get update && \
    apt-get -y install sudo \
 && rm -rf /var/lib/apt/lists/*


RUN useradd -m -d /home/${knimeuser} ${knimeuser} && \
    chown -R ${knimeuser} /home/${knimeuser} && \
    adduser ${knimeuser} sudo && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

USER ${knimeuser}

############################################# Basic packages ###########################################################

# needs to be done in noninteractive way to install tzdata

RUN sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
    build-essential \
    curl \
    firefox \
    gedit \
    git \
    gtk2-engines-pixbuf \
    htop \
    man \
    mc \
    ncbi-blast+ \
    pandoc \
    software-properties-common \
    unzip \
    wget \
 && sudo rm -rf /var/lib/apt/lists/*

# installs additional system packages needed for plotly
RUN sudo apt-get update && sudo apt-get install -y \
    libcurl4-openssl-dev \
    libssl-dev \
 && sudo rm -rf /var/lib/apt/lists/*

########################################################### GUI ########################################################

#RUN apt-get update -y
# installs desktop environment
RUN sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install \
    xfce4 \
    xfce4-goodies \
    locales -y \
 && sudo rm -rf /var/lib/apt/lists/*

################################# creates some folders and copies the supplemental files ###############################

# create folders
RUN mkdir ${knime_workspace_folder}

# copy external files to docker image
COPY --chown=${knimeuser}:${knimeuser} ${files_to_copy_folder} ${copied_files_folder}
COPY --chown=${knimeuser}:${knimeuser} ${files_to_copy_folder}/home_folder/.config ${knimeuser_home}/.config
RUN chmod 755 ${copied_files_folder}/entrypoint.sh && \
    chmod 755 ${copied_files_folder}/knime_with_workspace.sh && \
    chmod 755 ${copied_files_folder}/metanodes_reset.sh && \
    chmod 755 ${copied_files_folder}/workflows_reset.sh

# set default locations
ENV HOME ${knimeuser_home}
WORKDIR ${knimeuser_home}

##### set locales so that gnome-terminal can be initiated (arrow shortucts don't work on xterm for some reason) ########

RUN sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && sudo locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# set bash as knimeuser's login shell
RUN sudo chsh -s /bin/bash ${knimeuser}

###################################################### PYTHON ##########################################################

# installs system libraries for pyenv to work
RUN sudo apt-get update && sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl -y

# install pyenv using pyenv-installer
RUN curl https://pyenv.run | bash

# sets some variables and PATH
ENV PYENV_ROOT $knimeuser_home/.pyenv
#ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
ENV PATH="${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}"
RUN echo 'export PYENV_ROOT="$knimeuser_home/.pyenv"' >> .bashrc
RUN echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> .bashrc

# initiates pyenv and pyenv virtualenv
RUN echo 'eval "$(pyenv init -)"' >> .bashrc
RUN echo 'eval "$(pyenv virtualenv-init -)"' >> .bashrc

### environment - 4.1.3a
# installs base python
RUN pyenv install 3.6.9
# sets virtualenv
RUN pyenv virtualenv 3.6.9 4-1-3a
#COPY --chown=${knimeuser}:${knimeuser} ${files_to_copy_folder}/environments/4-1-3a_python.txt ${knimeuser_home}/environments/4-1-3a_python.txt
# installs some extra Ubuntu packages required by some python modules
#RUN sudo apt-get update -y  && sudo apt-get install libcairo2-dev libjpeg-dev libgif-dev libgirepository1.0-dev -y
RUN sudo apt-get update -y  && sudo apt-get install -y \
    # packages for pycairo and pygobject
    libcairo2-dev libjpeg-dev libgif-dev libgirepository1.0-dev
# installs packages based on the requirements file
RUN /bin/bash -i -c '      source .bashrc && \
                        pyenv activate 4-1-3a && \
                        pip install --upgrade pip \
                        pip install --requirement ${copied_files_folder}/environments/4-1-3a_python.txt'

### environment - 4.4.2a
# installs base python
RUN pyenv install 3.10.0
# sets virtualenv
RUN pyenv virtualenv 3.10.0 4-4-2a
# installs required packages based on the requirements file
#COPY --chown=${knimeuser}:${knimeuser} ${files_to_copy_folder}/environments/4-4-2a_python.txt ${knimeuser_home}/environments/4-4-2a_python.txt
#RUN sudo apt-get update -y  && sudo apt-get install libcairo2-dev libjpeg-dev libgif-dev libgirepository1.0-dev -y
RUN /bin/bash -i -c '      source .bashrc && \
                        pyenv activate 4-4-2a && \
                        pip install --upgrade pip \
                        pip install --requirement ${copied_files_folder}/environments/4-4-2a_python.txt'

###################################################### R ###############################################################

# base packages for make multiple R installation process
RUN sudo apt-get update -y  && sudo apt-get install -y \
    gdebi-core

# setup R used in 4.1.3a
ENV R_VERSION=3.6.3
## adds extra packages needed by the base R
RUN sudo apt-get update -y  && sudo apt-get install -y \
    gfortran \
    libblas-dev \
    libicu-dev \
    liblapack-dev \
    zip

#RUN curl -O https://cdn.rstudio.com/r/ubuntu-2004/pkgs/r-${R_VERSION}_1_amd64.deb && \
#    sudo dpkg -i r-${R_VERSION}_1_amd64.deb && \
#    sudo gdebi r-${R_VERSION}_1_amd64.deb

ADD --chown=knimeuser:knimeuser https://cran.r-project.org/src/base/R-3/R-${R_VERSION}.tar.gz ${knimeuser_home}/R/
RUN tar -xzvf ${knimeuser_home}/R/R-${R_VERSION}.tar.gz
WORKDIR ${knimeuser_home}/R/R-${R_VERSION}

RUN ./configure --prefix=${knimeuser_home}/environments/R/3.6.3 --enable-R-shlib --with-blas --with-lapack
RUN make
RUN make install

## installs renv from the github
RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages("remote")'
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages("renv")'
RUN /opt/R/${R_VERSION}/bin/R -e 'remotes::install_github("rstudio/renv")'
## sets new renv for the previouos container version
RUN /opt/R/${R_VERSION}/bin/R -e 'renv::init(project=${knimeuser_home}/.renv/4.1.3a/)'

### install Rserve
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages(c("Rserve"),repos="https://rforge.net/")'
#
### install R packages sources
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages(c("BiocManager", "remotes"),repos="http://cran.rstudio.com/")'
#
### installs stable R packages from Bioconductor
#RUN /opt/R/${R_VERSION}/bin/R -e 'BiocManager::install(c("Biobase", "impute", "limma", "pcaMethods", "preprocessCore", "proDA", "vsn"))'
#
### installs additional R packages from default R cran
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages(c("imp4p", "gprofiler2", "compositions", "plotly", "robCompositions", "UpSetR"))'
#
### installs additional R packages from sources
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages("https://cran.r-project.org/src/contrib/corpcor_1.6.9.tar.gz", repos = NULL, type="source")'
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages("https://cran.r-project.org/src/contrib/Hotelling_1.0-5.tar.gz", repos = NULL, type="source")'

## installs packages
RUN /opt/R/${R_VERSION}/bin/R -e ' \
    installedPreviously <- read.csv("./files_to_copy/4-1-3a_R.csv") && \
    install.packages(installedPreviously) \
    '
# verifies installed R version
#RUN /opt/R/${R_VERSION}/bin/R --version

# installs R packages as specified in the environments file ${copied_files_folder}/environments/4-1-3a_R.csv
#RUN sudo /opt/R/3.6.3/bin/R -e 'install.packages(c("Rserve"),repos="https://rforge.net/")'

## installs additional R packages from sources
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages("https://cran.r-project.org/src/contrib/corpcor_1.6.9.tar.gz", repos = NULL, type="source")'
#RUN /opt/R/${R_VERSION}/bin/R -e 'install.packages("https://cran.r-project.org/src/contrib/Hotelling_1.0-5.tar.gz", repos = NULL, type="source")'

#RUN sudo /opt/R/3.6.3/bin/R -e 'install.packages(c("Rserve"),repos="https://rforge.net/")'

## this needs to be optimized
#RUN sudo cp /etc/apt/sources.list /etc/apt/sources.list~
#RUN sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
#RUN sudo apt-get update && sudo apt-get build-dep r-base -y
#ADD --chown=knimeuser:knimeuser https://cran.r-project.org/src/base/R-3/R-3.6.3.tar.gz ${knimeuser_home}/environments/
#RUN tar -xzvf ${knimeuser_home}/environments/R-3.6.3.tar.gz
#WORKDIR ${knimeuser_home}/environments/R-3.6.3
#
#RUN ./configure --prefix=${knimeuser_home}/environments/R/3.6.3 --enable-R-shlib --with-blas --with-lapack
#RUN make
#RUN make install
#
#COPY --chown=${knimeuser}:${knimeuser} ./files_to_copy/4-1-3a_R.csv ${knimeuser_home}/environments/4-1-3a_R.csv
#
#RUN sudo /opt/R/3.6.3/bin/R -e 'install.packages(c("Rserve"),repos="https://rforge.net/")'

# install latest ubuntu R from the specified repository (depending on the version of R, versions of bioconductor + bioconductor packages install)

## adds repository and its GPG key for the latest R version (3.6 at the time of writing)
#RUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
#RUN echo "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/" | sudo tee /etc/apt/sources.list.d/cran.list > /dev/null
#
#ENV R_BASE_VERSION 3.6.2
#
#RUN sudo apt-get update && sudo apt-get install -y \
#	r-base=${R_BASE_VERSION}* \
#	r-recommended=${R_BASE_VERSION}* \
#	r-base-dev=${R_BASE_VERSION}* \
# && sudo rm -rf /var/lib/apt/lists/*
#
## install Rserve
#RUN sudo R -e 'install.packages(c("Rserve"),repos="https://rforge.net/")'
#
## install R packages sources
#RUN sudo R -e 'install.packages(c("BiocManager", "remotes"),repos="http://cran.rstudio.com/")'
#
## installs stable R packages from Bioconductor
#RUN sudo R -e 'BiocManager::install(c("Biobase", "impute", "limma", "pcaMethods", "preprocessCore", "proDA", "vsn"))'
#
## installs additional R packages from default R cran
#RUN sudo R -e 'install.packages(c("imp4p", "gprofiler2", "compositions", "plotly", "robCompositions", "UpSetR"))'
#
## installs additional R packages from sources
#RUN sudo R -e 'install.packages("https://cran.r-project.org/src/contrib/corpcor_1.6.9.tar.gz", repos = NULL, type="source")'
#RUN sudo R -e 'install.packages("https://cran.r-project.org/src/contrib/Hotelling_1.0-5.tar.gz", repos = NULL, type="source")'

################################################################# KNIME ####################################################################

# version of the KNIME to be installed; if changed, consider changing also other version related ARGs like package repositories
ARG knime_version=4.4.2

# KNIME file name to be downloaded and installed
ARG knime_file=knime_${knime_version}.linux.gtk.x86_64.tar.gz

# links to online repositories to be used when installing knime extensions

ARG knime_partners_repository=https://update.knime.com/partner/4.4
ARG knime_analytics_platform_repository=https://update.knime.com/analytics-platform/4.4
ARG knime_community_trusted_repository=https://update.knime.com/community-contributions/trusted/4.4
ARG knime_community_experimental_repository=https://update.knime.com/community-contributions/4.4

# names + versions of extensions that will be additionally installed to knime (they are installed manually below in this section)
# if you add other extension, it needs to be added into the KNIME installation part as well

ARG knime_python_extension=org.knime.features.python2.feature.group/4.4.2.v202110191522
ARG knime_r_extension=org.knime.features.r.feature.group/4.4.2.v202110181016
ARG knime_testing_framework_extension=org.knime.features.testing.core.feature.group/4.4.0.v202104260810
ARG knime_expressions_extension=org.knime.features.expressions.feature.group/4.4.0.v202106252311
ARG knime_reporting_designer_extension=org.knime.features.reporting.designer.feature.group/4.4.0.v202104131230
ARG knime_openms_extension=de.openms.feature.feature.group/2.7.0.202109131426
ARG knime_pia_extension=de.mpc.pia.feature.feature.group/1.4.2.v202109231401


# install KNIME
ADD --chown=knimeuser:knimeuser http://download.knime.org/analytics-platform/linux/${knime_file} ${knimeuser_home}/
RUN tar -xvf ${knimeuser_home}/${knime_file} -C ${knimeuser_home}/
RUN rm ${knimeuser_home}/${knime_file}

#rename knime folder to be without the version
RUN mv ${knimeuser_home}/knime_${knime_version} ${knime_folder}
#make knime executable
RUN sudo chmod +x ${knime_folder}/knime

# install knime extensions (python,r, etc.; the versions are specified above)
RUN ${knime_folder}/knime -clean -purgeHistory -application org.eclipse.equinox.p2.director -noSplash \
    -repository ${knime_partners_repository} \
    -repository ${knime_analytics_platform_repository} \
    -repository ${knime_community_trusted_repository} \
    -repository ${knime_community_experimental_repository} \
    -i ${knime_python_extension} \
    -i ${knime_r_extension} \
    -i ${knime_testing_framework_extension} \
    -i ${knime_expressions_extension} \
    -i ${knime_reporting_designer_extension} \
    -i ${knime_openms_extension} \
    -i ${knime_pia_extension}

# change max heap for knime (default is 2048m, i.e. -Xmx2g, which might not always be sufficient)
RUN sed -i 's/-Xmx.*/-Xmx4g/' ${knime_folder}/knime.ini


####################################################### VNC ############################################################

# tigervnc version to be installed, 64bit installation file is expected
ARG tigervnc_version=1.10.1

# download and unpack tigervnc (support for encryption if using tigervnc viewer)
RUN sudo wget -O /root/tigervnc-${tigervnc_version}.x86_64.tar.gz https://sourceforge.net/projects/tigervnc/files/stable/${tigervnc_version}/tigervnc-${tigervnc_version}.x86_64.tar.gz/download
RUN sudo tar -xvf /root/tigervnc-${tigervnc_version}.x86_64.tar.gz -C /root/
RUN sudo cp -a /root/tigervnc-${tigervnc_version}.x86_64/. /

RUN sudo rm -r /root/tigervnc-${tigervnc_version}.x86_64

# vnc startup - create so that there is no problem with file does not exist on vnc init
RUN sudo mkdir ${knimeuser_home}/.vnc
RUN sudo chown ${knimeuser}: ${knimeuser_home}/.vnc
RUN cp -f ${copied_files_folder}/xstartup ${knimeuser_home}/.vnc/xstartup
RUN sudo chmod +x ${knimeuser_home}/.vnc/xstartup

################################################### SHORTCUTS ##########################################################

RUN mkdir ${knimeuser_home}/Desktop

# shortcut to knime
RUN sudo cp ${copied_files_folder}/knime.desktop /usr/share/applications
RUN sudo cp /usr/share/applications/knime.desktop ${knimeuser_home}/Desktop/

# shortcut to Metanodes template reset
RUN sudo cp ${copied_files_folder}/Metanodes_templates_reset.desktop /usr/share/applications
RUN sudo cp /usr/share/applications/Metanodes_templates_reset.desktop ${knimeuser_home}/Desktop/

# shortcut to Workflows template reset
RUN sudo cp ${copied_files_folder}/Workflows_templates_reset.desktop /usr/share/applications
RUN sudo cp /usr/share/applications/Workflows_templates_reset.desktop ${knimeuser_home}/Desktop/


################################################# FINAL ACTIONS ########################################################

## create version file in knimeuser home, just for info
RUN touch ${knimeuser_home}/version-${dockerfile_version}

## make folders available to knimeuser
RUN sudo chown -R ${knimeuser}: ${copied_files_folder}

RUN sudo chown -R ${knimeuser}: ${knimeuser_home}
#RUN chown -R ${knimeuser}: ${knime_folder}
#RUN chown -R ${knimeuser}: ${knimeuser_home}/Desktop
#RUN chown -R ${knimeuser}: ${knime_workspace_folder}

## make shortcuts executable
RUN sudo chmod -R 770 ${knimeuser_home}/Desktop

# enabling timezone setting by entrypoint.sh by knimeuser
RUN sudo chown ${knimeuser}: /etc/timezone
#RUN chown -h ${knimeuser} /etc/localtime

#RUN sudo apt install -y --no-install-recommends tigervnc-standalone-server

EXPOSE 5901
ENTRYPOINT ["/usr/copied_files/entrypoint.sh"]
